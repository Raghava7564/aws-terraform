/**\mainpage Auto-generated Documentation
```doxygen
/*! \mainpage Project Documentation

\section overview Overview

This document provides an overview of the project's architecture and key components.
It includes a diagram illustrating the flow of execution and the relationships between different modules.

\section architecture Architecture

\subsection mvc MVC Structure

The project follows the Model-View-Controller (MVC) architectural pattern. The main components are organized as follows:

- **Controllers:** Handle user input and interact with the Model.
- **Models:** Represent the data and business logic of the application.
- **Views:** Display the data to the user.
- **Services:** Contains business logic, data access, or third-party integrations.

\subsection flow Execution Flow

The typical execution flow is as follows:

1. The user interacts with a View (e.g., clicks a button, submits a form).
2. The View triggers an action in a Controller.
3. The Controller processes the request, often using Services to interact with data.
4. The Controller updates the Model.
5. The Controller selects a View to display the updated Model to the user.

\section modules Modules

\subsection group_controllers Controllers

\dot
digraph Controllers {
    node [shape=box];
    "HomeController" [label="HomeController"];
    "AccountController" [label="AccountController"];

    subgraph cluster_services {
        label = "Services";
        node [shape=component];
        "UserService" [label="UserService"];
        "ProductService" [label="ProductService"];
    }

    subgraph cluster_models {
        label = "Models";
        node [shape=cylinder];
        "User" [label="User"];
        "Product" [label="Product"];
    }

    subgraph cluster_views {
        label = "Views";
        node [shape=note];
        "Home/Index.cshtml" [label="Home/Index.cshtml"];
        "Account/Login.cshtml" [label="Account/Login.cshtml"];
        "Product/Details.cshtml" [label="Product/Details.cshtml"];
    }

    "HomeController" -> "Home/Index.cshtml";
    "HomeController" -> "ProductService";
    "ProductService" -> "Product";
    "HomeController" -> "Product";
    "Product/Details.cshtml" -> "Product";
    "AccountController" -> "Account/Login.cshtml";
    "AccountController" -> "UserService";
    "UserService" -> "User";
    "Account/Login.cshtml" -> "User";
}
\enddot

\subsection diagram_explanation Diagram Explanation

This diagram illustrates the interaction between different components in the application.
Controllers like `HomeController` and `AccountController` are the entry points for user requests.
They use Services like `UserService` and `ProductService` to manage data access and business logic.
Models such as `User` and `Product` represent the data. Views, such as `Home/Index.cshtml`, `Account/Login.cshtml` and `Product/Details.cshtml` are responsible for displaying the data to the user.
The arrows indicate the direction of interaction, showing how the components depend on each other.
*/
```
*/